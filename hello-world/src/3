
(uiop:define-package :raylib-bindings
  (:use :cl :cffi :raylib-manager :iv-utils :bordeaux-threads))

(in-package #:raylib-bindings)

(raylib-manager::raylib-ensure-loaded)

;; void InitWindow(int width, int height, const char *title);
(defcfun ("InitWindow" init-window) :void
  (width :int) (height :int) (title :string))

;; bool WindowShouldClose(void);                               // Check if application should c
(defcfun ("WindowShouldClose" window-should-close) :bool)

;; void BeginDrawing(void);                                    // Setup canvas (framebuffer) to
(defcfun ("BeginDrawing" begin-drawing) :void)

;; void EndDrawing(void);                                    
(defcfun ("EndDrawing" end-drawing) :void)

;; void DrawRectangle(int posX, int posY, int width, int height, Color color);                        // Draw a color-filled rectangle
(defcfun ("DrawRectangle" draw-rectangle) :void
  (posX :int) (posY :int) (width :int) (height :int) (color :long))

;; void DrawText(const char *text, int posX, int posY, int fontSize, Color color);       // Draw text (using default font)
(defcfun ("DrawText" draw-text) :void
  (text :string) (posX :int) (posY :int) (font-size :int) (color :long))

(defcfun ("ClearBackground" clear-background) :void
  (color :long))

;; void SetTargetFPS(int fps);                                 // Set target FPS (maximum)
(defcfun ("SetTargetFPS" set-target-fps) :void
  (fpt :int))

;; void CloseWindow(void);                                     // Close window and unload OpenG
(defcfun ("CloseWindow" close-window) :void)

(defmacro with-window ((width height title) &body body)
  `(progn
     (init-window ,width ,height ,title)
     (unwind-protect
          (loop
            :until (window-should-close)
            :do (progn
                  ,@body))
       (close-window))))

(defmacro with-drawing (&body body)
  `(progn
     (begin-drawing)
     (progn ,@body)
     (end-drawing)))

(defparameter *main-id* nil)

(defun start ()
  (setf *main-id* (bt:make-thread #'(lambda () (main)))))

(defun end ()
  (unless (null *main-id*)
    (bt:destroy-thread *main-id*)
    (setf *main-id* nil)))

(defun restart-main ()
  (end)
  (start))



(defun button-create (x y width height text font-size &optional color on-click)
  (let* ((%rect (make-rectangle :x x :y y
                                :width width :height height :color color))
         (%text (make-text :content text
                           :x (+ x 110)
                           :y (+ y 50)
                           :font-size font-size :color #xffffffff))
         (%btn (make-button :rectangle %rect :text %text)))
    %btn))

(defparameter *buttons* '())

(defun draw-button (x y width height text font-size &key (color #xffffffff) (on-click nil))
  (let* ((btn (button-create x y width height text font-size color on-click))
         (rect (button-rectangle btn))
         (text (button-text btn)))
    (draw-rectangle (rectangle-x rect) (rectangle-y rect)
                    (rectangle-width rect) (rectangle-height rect) color)
    (draw-text (text-content text) (text-x text) (text-y text) (text-font-size text) (text-color text))
    (pushnew btn *buttons*)))


(setf *gui-elements* '())

(defun container (x y width height color scale &rest elements)
  (list :type :container :x x :y y :width width :height height :color color :scale scale :elements elements))

(defun text (value relx rely font-size &optional (color #xffffffff))
  (list :type :text :value value :relx relx :rely rely :font-size font-size :color color))

(defun draw-element (element &key (parent-container nil) (scale 1))
  (let ((container-x (if parent-container (getf parent-container :x) 0))
        (container-y (if parent-container (getf parent-container :y) 0)))
    (case (getf element :type)
      (:text
       (draw-text (getf element :value)
                  (+ (getf element :relx) container-x)
                  (+ (getf element :rely) container-y)
                  (round (* (getf element :font-size) scale))
                  (getf element :color)))
      (:container
       (progn
         (draw-rectangle (+ (getf element :x) container-x)
                         (+ (getf element :y) container-y)
                         (getf element :width)
                         (getf element :height)
                         (getf element :color))
         (dolist (e (getf element :elements))
           (draw-element e :parent-container element :scale (getf element :scale))))))))


(defun logic ()
  (set-target-fps 60)
  (with-drawing
    (clear-background #x003300) ;; dark green
    (draw-element
     (let ((elements 
     (container 50 50 300 200 #xff141403 1.0
                (text "username" 80 30 30 #xffa0fff0)
                (button "fuck this" 20 180 30 #xffa0fff0)
                ))))

;;(draw-text "hello" 200 200 80 #xffffffff))))

(defun main()
  (with-window (1600 1200 "hello")
    (logic)))
